
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Random;
import java.util.regex.MatchResult;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author anastasiia
 */
public class Task31 extends javax.swing.JFrame {

    /**
     * Creates new form Task29
     */
    public Task31() {
        initComponents();
        jFileChooser1.addActionListener(this.loadActionListener);
        jFileChooser1.addActionListener(this.saveActionListener);
        
        jComboBox1.removeAllItems();
        jComboBox1.addItem(Encoding.ASCII.toString());
        jComboBox1.addItem(Encoding.UTF_8.toString());
        jComboBox1.addItem(Encoding.Unicode.toString());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jdFileOpen = new javax.swing.JDialog();
        jFileChooser1 = new javax.swing.JFileChooser();
        jbOpen = new javax.swing.JButton();
        jbSave = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();

        jdFileOpen.setMinimumSize(new java.awt.Dimension(300, 200));
        jdFileOpen.setSize(new java.awt.Dimension(300, 200));

        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionLoadPerformed(evt);
                jFileChooser1ActionSavePerformed(evt);
            }
        });
        jdFileOpen.getContentPane().add(jFileChooser1, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jbOpen.setText("Load");
        jbOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOpenActionPerformed(evt);
            }
        });

        jbSave.setText("Save");
        jbSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setText("Encoding");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ASCII", "UTF-8", "Unicode" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbSave))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(122, 122, 122)
                        .addComponent(jbOpen)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jbOpen)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(77, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOpenActionPerformed
        // TODO add your handling code here:
        jdFileOpen.setVisible(true);
        //JFileChooser.APPROVE_SELECTION
        jFileChooser1.setDialogType(JFileChooser.OPEN_DIALOG);
       

    }//GEN-LAST:event_jbOpenActionPerformed

    private void jbSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveActionPerformed
        // TODO add your handling code here:
         jdFileOpen.setVisible(true);
        //JFileChooser.APPROVE_SELECTION
        jFileChooser1.setDialogType(JFileChooser.SAVE_DIALOG);
    }//GEN-LAST:event_jbSaveActionPerformed

    private void jFileChooser1ActionLoadPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionLoadPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFileChooser1ActionLoadPerformed

    private void jFileChooser1ActionSavePerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionSavePerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFileChooser1ActionSavePerformed

    public static float randFloat(float min, float max) {

        Random rand = new Random();

        return (float)rand.nextDouble(min, max);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Task31.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Task31.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Task31.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Task31.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Task31().setVisible(true);
            }
        });
    }
    
    
    private enum Encoding{
        ASCII,
        UTF_8,
        Unicode
    };
    
    Encoding getEncoding(String v){
        Encoding result = Encoding.ASCII;
        
        switch(v)
        {
            
            case "ASCII":
                result = Encoding.ASCII;
                break;
            case "UTF_8":
                result = Encoding.UTF_8;
                break;
            case "Unicode":
                result = Encoding.Unicode;
                break;
 
        }
        
        return result;
        
    }
    
    
    void writeTextToFile(String text, java.io.File file, Encoding enc)
    {
        try(RandomAccessFile dos = new RandomAccessFile(file,"rw")) {
            switch(enc){
                case ASCII:
                    dos.write(text.getBytes());
                    break;
                case UTF_8:
                    dos.writeUTF(text);
                    break;
                case Unicode:
                    dos.write(text.getBytes(Charset.forName("UTF-16")));
                    break;                        
            }
            //...
        }
        catch(IOException e){              
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null, e.toString(), "Error: file io " , JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    String readTextToFile(java.io.File file, Encoding enc)
    {
        String result = "";
        
        try(RandomAccessFile dos = new RandomAccessFile(file,"r")) {
            byte[] b;
            switch(enc){
                case ASCII:
                    b = new byte[(int)dos.length()];
                    dos.read(b);
                    result = new String(b);
                    break;
                case UTF_8:
                    result = dos.readUTF();
                    break;
                case Unicode:
                    b = new byte[(int)dos.length()];
                    dos.read(b);
                    result = new String(b,Charset.forName("UTF-16"));
                    break;                        
            }
        }
        catch(IOException e){              
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null, e.toString(), "Error: file io " , JOptionPane.ERROR_MESSAGE);
            this.jdFileOpen.setVisible(false);
        }
        
        return result;
        
    }

    
    private ActionListener saveActionListener = (ae) -> {
        
            if(this.jFileChooser1.getDialogType() != (JFileChooser.SAVE_DIALOG))
                return;
            
            if(ae.getActionCommand().equals(JFileChooser.APPROVE_SELECTION))
            {

                String text = this.jTextArea1.getText();
                Encoding enc = getEncoding((String)this.jComboBox1.getSelectedItem());
                writeTextToFile(text, this.jFileChooser1.getSelectedFile(), enc);
                
                
                this.jdFileOpen.setVisible(false);
            }
            else
            {
                this.jdFileOpen.setVisible(false);
            }
        };
    
    
    private ActionListener loadActionListener = (ae) -> {
            if(this.jFileChooser1.getDialogType() != (JFileChooser.OPEN_DIALOG))
                return;
            if(ae.getActionCommand().equals(JFileChooser.APPROVE_SELECTION))
            {

                
                Encoding enc = getEncoding((String)this.jComboBox1.getSelectedItem());
                String text = readTextToFile(this.jFileChooser1.getSelectedFile(),  enc);
                this.jTextArea1.setText(text);
                
                this.jdFileOpen.setVisible(false);
            }
            else
            {
                this.jdFileOpen.setVisible(false);
            }
        };
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton jbOpen;
    private javax.swing.JButton jbSave;
    private javax.swing.JDialog jdFileOpen;
    // End of variables declaration//GEN-END:variables

    private Exception IllegalArgumentException(String string) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
